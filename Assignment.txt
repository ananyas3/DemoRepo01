A1. Write the logic to for incrementing Squared Number-Star Pattern.
Input Format      : Take N as input of type integer.
Output Format     : Print incrementing Squared Number-Star Pattern.

Constraints:
2<=N<=10
Sample Input:
5
Sample Output:
1*2*3*4*5
6*7*8*9*10
11*12*13*14*15
16*17*18*19*20
21*22*23*24*25

A2.Program to find nth number made of given four digits 1, 4,6 and 9 as the only digits..

Input Format:

The First Line Of Input Contains T no of test cases
The Second Line Of Input Contains N as input taken.

Output Format:
Print the number of digits in the nth number .

Constraints:

1<=T<=100
1<=N<=100

Examples:

Input : 6
Output : 14

1,4 6, 9.11,14

Input : 21
Output : 111

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// Function to find the N-th number made of digits 1, 4, 6, 9
void find_nth_number(int N) {
    // Digits allowed to form the number
    char digits[] = {'1', '4', '6', '9'};
    // Queue for storing numbers as strings
    char queue[1000][20];  // Large enough to hold 1000 numbers, each up to 20 digits
    int front = 0, rear = 0;
    
    // Initialize queue with single digits '1', '4', '6', '9'
    queue[rear][0] = '1'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '4'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '6'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '9'; queue[rear][1] = '\0'; rear++;
    
    // Process the queue
    for (int count = 1; count < N; count++) {
        // Get the front element of the queue
        char current[20];
        strcpy(current, queue[front]);
        front++;
        
        // Append the digits '1', '4', '6', '9' to the current number
        for (int i = 0; i < 4; i++) {
            char new_number[20];
            // Append the digit to the current number
            sprintf(new_number, "%s%c", current, digits[i]);
            // Add the new number to the queue
            strcpy(queue[rear], new_number);
            rear++;
        }
    }
    
    // The N-th number will now be at the front position of the queue
    printf("%s\n", queue[front]);
}

int main() {
    int T, N;
    // Input number of test cases
    scanf("%d", &T);
    
    while (T--) {
        // Input N for the current test case
        scanf("%d", &N);
        
        // Find and print the N-th number formed by digits 1, 4, 6, 9
        find_nth_number(N);
    }
    
    return 0;
}


A3. Write a program to find the  n-th number made of prime digits

Input Format:
First Line Of Input Contains T Number Of Test Cases
Second Line Of Input Contains an input Number N.

Output Format:
Print the Nth number of sequence and it should be only prime.

Constraints:
1<=T<=100
1<=N<=10000

Examples :
Input  :
1
10
Output :
 33

#include <stdio.h>
#include <string.h>

// Function to find the N-th number made of prime digits (2, 3, 5, 7)
void find_nth_prime_number(int N) {
    // Prime digits allowed for forming the numbers
    char prime_digits[] = {'2', '3', '5', '7'};
    // Queue to hold the numbers being generated
    char queue[100000][10];  // Large enough for 10000 numbers
    int front = 0, rear = 0;
    
    // Initialize the queue with single prime digits
    queue[rear][0] = '2'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '3'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '5'; queue[rear][1] = '\0'; rear++;
    queue[rear][0] = '7'; queue[rear][1] = '\0'; rear++;
    
    // Generate numbers using the prime digits
    for (int count = 1; count < N; count++) {
        // Get the front element from the queue
        char current[10];
        strcpy(current, queue[front]);
        front++;
        
        // Append each prime digit to the current number and add to the queue
        for (int i = 0; i < 4; i++) {
            char new_number[10];
            // Append the digit to the current number
            sprintf(new_number, "%s%c", current, prime_digits[i]);
            // Add the new number to the queue
            strcpy(queue[rear], new_number);
            rear++;
        }
    }
    
    // The N-th number will now be at the front position of the queue
    printf("%s\n", queue[front]);
}

int main() {
    int T, N;
    
    // Input the number of test cases
    scanf("%d", &T);
    
    while (T--) {
        // Input N for the current test case
        scanf("%d", &N);
        
        // Find and print the N-th number made of prime digits (2, 3, 5, 7)
        find_nth_prime_number(N);
    }
    
    return 0;
}


A4. rotate array every kth element

1 2 3 4 5 6 7 8 9

k= 3

3 2 1 6 5 4 9 8 7

#include <stdio.h>

// Function to reverse a portion of the array
void reverse_chunk(int arr[], int start, int end) {
    while (start < end) {
        // Swap elements at 'start' and 'end'
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}

// Function to rotate every 'k' elements in the array
void rotate_array(int arr[], int n, int k) {
    // Process each chunk of size 'k'
    for (int i = 0; i < n; i += k) {
        // Find the end of the current chunk
        int end = (i + k - 1 < n) ? (i + k - 1) : (n - 1);  // Ensure we don't exceed the array bounds
        reverse_chunk(arr, i, end);  // Reverse the chunk
    }
}

// Function to print the array
void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    // Input the array size and the array itself
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);  // Size of the array
    int k = 3;  // Value of k, every k-th element to rotate
    
    // Rotate the array
    rotate_array(arr, n, k);
    
    // Output the rotated array
    print_array(arr, n);

    return 0;
}




A5.
Write a c program to print alphabet triangle.
Input: 5
Output:

     A
    ABA
   ABCBA
  ABCDCBA
 ABCDEDCBA



     1
    121
   12321
  1234321
 123454321

#include <stdio.h>

void print_alphabet_triangle(int n) {
    for (int i = 1; i <= n; i++) {
        // Print leading spaces
        for (int j = 1; j <= n - i; j++) {
            printf(" ");
        }

        // Print increasing part of the alphabet
        for (int j = 1; j <= i; j++) {
            printf("%c", 'A' + j - 1);
        }

        // Print decreasing part of the alphabet
        for (int j = i - 1; j >= 1; j--) {
            printf("%c", 'A' + j - 1);
        }

        // Move to the next line
        printf("\n");
    }
}

int main() {
    int n;
    // Input the number of rows
    scanf("%d", &n);
    
    // Print the alphabet triangle
    print_alphabet_triangle(n);
    
    return 0;
}


A6. WAP to which should have the following functionalities
1. scan employee recs 
2. display
3. search for a particulary employee based on
  a. id
  b. lName
4. search for employess whos salary fall in
   between 6-10K and display only those records

5. update employee rec to change his/her lName

#include <stdio.h>
#include <string.h>

#define MAX_EMPLOYEES 100

// Structure for storing employee data
struct Employee {
    int id;
    char firstName[30];
    char lastName[30];
    float salary;
};

// Function to scan employee records
void scanEmployeeRecords(struct Employee employees[], int *count) {
    printf("Enter the number of employees: ");
    scanf("%d", count);

    for (int i = 0; i < *count; i++) {
        printf("\nEnter details for employee %d\n", i + 1);
        printf("ID: ");
        scanf("%d", &employees[i].id);
        printf("First Name: ");
        scanf("%s", employees[i].firstName);
        printf("Last Name: ");
        scanf("%s", employees[i].lastName);
        printf("Salary: ");
        scanf("%f", &employees[i].salary);
    }
}

// Function to display employee records
void displayEmployeeRecords(struct Employee employees[], int count) {
    printf("\nEmployee Records:\n");
    for (int i = 0; i < count; i++) {
        printf("\nEmployee %d:\n", i + 1);
        printf("ID: %d\n", employees[i].id);
        printf("First Name: %s\n", employees[i].firstName);
        printf("Last Name: %s\n", employees[i].lastName);
        printf("Salary: %.2f\n", employees[i].salary);
    }
}

// Function to search for an employee by ID
void searchEmployeeById(struct Employee employees[], int count, int id) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (employees[i].id == id) {
            printf("\nEmployee Found:\n");
            printf("ID: %d\n", employees[i].id);
            printf("First Name: %s\n", employees[i].firstName);
            printf("Last Name: %s\n", employees[i].lastName);
            printf("Salary: %.2f\n", employees[i].salary);
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("Employee with ID %d not found.\n", id);
    }
}

// Function to search for an employee by Last Name
void searchEmployeeByLastName(struct Employee employees[], int count, char lastName[]) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (strcmp(employees[i].lastName, lastName) == 0) {
            printf("\nEmployee Found:\n");
            printf("ID: %d\n", employees[i].id);
            printf("First Name: %s\n", employees[i].firstName);
            printf("Last Name: %s\n", employees[i].lastName);
            printf("Salary: %.2f\n", employees[i].salary);
            found = 1;
        }
    }
    if (!found) {
        printf("Employee with Last Name %s not found.\n", lastName);
    }
}

// Function to display employees with salary between 6K and 10K
void displayEmployeesInSalaryRange(struct Employee employees[], int count) {
    int found = 0;
    printf("\nEmployees with Salary between 6000 and 10000:\n");
    for (int i = 0; i < count; i++) {
        if (employees[i].salary >= 6000 && employees[i].salary <= 10000) {
            printf("ID: %d, Name: %s %s, Salary: %.2f\n",
                   employees[i].id, employees[i].firstName, employees[i].lastName, employees[i].salary);
            found = 1;
        }
    }
    if (!found) {
        printf("No employees found with salary in this range.\n");
    }
}

// Function to update employee's last name
void updateEmployeeLastName(struct Employee employees[], int count, int id, char newLastName[]) {
    int found = 0;
    for (int i = 0; i < count; i++) {
        if (employees[i].id == id) {
            strcpy(employees[i].lastName, newLastName);
            printf("Employee's last name updated successfully.\n");
            found = 1;
            break;
        }
    }
    if (!found) {
        printf("Employee with ID %d not found.\n", id);
    }
}

int main() {
    struct Employee employees[MAX_EMPLOYEES];
    int count = 0;
    int choice, id;
    char lastName[30], newLastName[30];
    
    while (1) {
        printf("\nMenu:\n");
        printf("1. Scan Employee Records\n");
        printf("2. Display Employee Records\n");
        printf("3. Search Employee by ID\n");
        printf("4. Search Employee by Last Name\n");
        printf("5. Display Employees with Salary between 6000 and 10000\n");
        printf("6. Update Employee Last Name\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                scanEmployeeRecords(employees, &count);
                break;
            case 2:
                displayEmployeeRecords(employees, count);
                break;
            case 3:
                printf("Enter Employee ID to search: ");
                scanf("%d", &id);
                searchEmployeeById(employees, count, id);
                break;
            case 4:
                printf("Enter Employee Last Name to search: ");
                scanf("%s", lastName);
                searchEmployeeByLastName(employees, count, lastName);
                break;
            case 5:
                displayEmployeesInSalaryRange(employees, count);
                break;
            case 6:
                printf("Enter Employee ID to update last name: ");
                scanf("%d", &id);
                printf("Enter the new Last Name: ");
                scanf("%s", newLastName);
                updateEmployeeLastName(employees, count, id, newLastName);
                break;
            case 7:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    
    return 0;
}


A7. 
1. Create an empty string, D.
2. Let N be the size of the received string M.
3. Place the first ceil(N/2) characters from M at the odd positions in string D.
4. Take the remaining characters from M and put them at the even positions in D.
5. D is the output string.

I/p
aebfcgdh

o/p
abcdefgh

#include <stdio.h>
#include <string.h>
#include <math.h> // For ceil function

void rearrangeString(char M[], char D[]) {
    int N = strlen(M);               // Get the length of M
    int mid = (int)ceil(N / 2.0);    // Calculate ceil(N/2)
    int j = mid;                     // Pointer for even positions in D
    
    // Fill odd positions in D (1st half of M)
    for (int i = 0; i < mid; i++) {
        D[2 * i] = M[i];             // Place characters at 0, 2, 4, ... (odd positions)
    }
    
    // Fill even positions in D (remaining characters of M)
    for (int i = mid; i < N; i++) {
        D[2 * (i - mid) + 1] = M[i]; // Place characters at 1, 3, 5, ... (even positions)
    }

    // Null terminate the string D
    D[N] = '\0';
}

int main() {
    char M[] = "aebfcgdh";  // Input string
    int N = strlen(M);      // Length of the input string
    char D[N + 1];          // Output string (N+1 to account for null terminator)

    rearrangeString(M, D);

    printf("Output String: %s\n", D); // Output the result

    return 0;
}



A8. Given a string, find if it is a palindromic anagram is possible or not

i/p
carrace
o/p
True

i/p
abcdeffgh
o/p
false

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// Function to check if a string can be a palindromic anagram
bool isPalindromicAnagram(char str[]) {
    int freq[256] = {0};  // To store frequency of characters (assuming ASCII characters)
    int oddCount = 0;

    // Traverse the string and count frequencies of each character
    for (int i = 0; str[i] != '\0'; i++) {
        freq[str[i]]++;
    }

    // Check how many characters have an odd count
    for (int i = 0; i < 256; i++) {
        if (freq[i] % 2 != 0) {
            oddCount++;
        }
    }

    // If more than one character has an odd frequency, return false
    return oddCount <= 1;
}

int main() {
    char str1[] = "carrace";
    char str2[] = "abcdeffgh";

    // Check and display if the strings can form a palindromic anagram
    if (isPalindromicAnagram(str1)) {
        printf("True\n");  // "carrace" can be rearranged into a palindrome
    } else {
        printf("False\n");
    }

    if (isPalindromicAnagram(str2)) {
        printf("True\n");
    } else {
        printf("False\n");  // "abcdeffgh" cannot be rearranged into a palindrome
    }

    return 0;
}


A9. The first line contains an integer N, denoting the total number of books.
Next, N lines contain a string that denotes "title", "author", and "genre" separated by a comma.
Note: In code stub, you get 2D array books: where the 0th column denotes the title,
      the 1st column denotes the author, and the 2nd column denotes the genre

Input:

4
The Great Gatsby,F. Scott Fitzgerald,fiction
The Diary of a Young Girl,Anne Frank,non-fiction
Harry Potter and the Philosophers Stone,J.K. Rowling,children
The Catcher in the Rye,J.D. Salinger,fiction

Output:
Harry Potter and the Philosophers Stone
The Great Gatsby
The Catcher in the Rye
The Diary of a Young Girl

Explanation

The sorted genre is: [children, fiction, fiction, non-fiction].
#include <stdio.h>
#include <string.h>
 
#define MAX_BOOKS 100
#define MAX_LENGTH 100
 
// Function to perform bubble sort on books based on genre
void bubbleSort(char books[][3][MAX_LENGTH], int N) {
    for (int i = 0; i < N - 1; i++) {
        for (int j = 0; j < N - i - 1; j++) {
            // Compare genres (3rd column) of adjacent books
            if (strcmp(books[j][2], books[j + 1][2]) > 0) {
                // Swap the entire book data (title, author, genre) if genres are in the wrong order
                char temp[3][MAX_LENGTH];
                strcpy(temp[0], books[j][0]);
                strcpy(temp[1], books[j][1]);
                strcpy(temp[2], books[j][2]);
 
                strcpy(books[j][0], books[j + 1][0]);
                strcpy(books[j][1], books[j + 1][1]);
                strcpy(books[j][2], books[j + 1][2]);
 
                strcpy(books[j + 1][0], temp[0]);
                strcpy(books[j + 1][1], temp[1]);
                strcpy(books[j + 1][2], temp[2]);
            }
        }
    }
}
 
int main() {
    int N;
 
    // Read the number of books
    printf("Enter the number of books: ");
    scanf("%d", &N);
 
    // 2D array to store book details (title, author, genre)
    char books[N][3][MAX_LENGTH];
 
    // Reading book data
    printf("Enter book details (title, author, genre):\n");
    getchar(); // To clear the newline left by scanf
    for (int i = 0; i < N; i++) {
        char input[MAX_LENGTH * 3];  // To store the full input line for each book
 
        // Read the entire line (title, author, genre)
        printf("Book %d: ", i + 1);
        fgets(input, sizeof(input), stdin);
 
        // Removing the newline character at the end of the string (from fgets)
        input[strcspn(input, "\n")] = '\0';
 
        // Split the input into title, author, and genre using strtok
        char *title = strtok(input, ",");
        char *author = strtok(NULL, ",");
        char *genre = strtok(NULL, ",");
 
        // Store the parts into the 2D array
        if (title) strncpy(books[i][0], title, MAX_LENGTH);
        if (author) strncpy(books[i][1], author, MAX_LENGTH);
        if (genre) strncpy(books[i][2], genre, MAX_LENGTH);
    }
 
    // Perform bubble sort on the books array based on genre
    bubbleSort(books, N);
 
    // Output the sorted book titles
    printf("\nBooks sorted by genre:\n");
    for (int i = 0; i < N; i++) {
        printf("%s\n", books[i][0]);  // Print only the title
    }
 
    return 0;
}

A10. Find the GCD of the given list in such a way that by removing exactly one element and then taking the GCD will be the max

I/p
n= 3
7, 6 ,8

o/p
2

explanation: by removing 7 from the list GCD is 2 

#include <stdio.h>
#include <math.h>

// Function to compute the GCD of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find the maximum GCD after removing exactly one element
int maxGCDAfterRemoval(int arr[], int n) {
    if (n == 1) return arr[0];  // Edge case where we have only one element
    
    int left[n], right[n];
    
    // Initialize the left and right GCD arrays
    left[0] = arr[0];
    for (int i = 1; i < n; i++) {
        left[i] = gcd(left[i - 1], arr[i]);
    }
    
    right[n - 1] = arr[n - 1];
    for (int i = n - 2; i >= 0; i--) {
        right[i] = gcd(right[i + 1], arr[i]);
    }
    
    // Now, calculate the max GCD when removing one element
    int maxGCD = 0;
    for (int i = 0; i < n; i++) {
        int gcdWithoutI;
        if (i == 0) {
            gcdWithoutI = right[1];  // When we remove the first element
        } else if (i == n - 1) {
            gcdWithoutI = left[n - 2];  // When we remove the last element
        } else {
            gcdWithoutI = gcd(left[i - 1], right[i + 1]);  // GCD of elements excluding arr[i]
        }
        
        // Update the max GCD
        if (gcdWithoutI > maxGCD) {
            maxGCD = gcdWithoutI;
        }
    }
    
    return maxGCD;
}

int main() {
    int arr[] = {7, 6, 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    int result = maxGCDAfterRemoval(arr, n);
    printf("Max GCD after removal: %d\n", result);
    
    return 0;
}


